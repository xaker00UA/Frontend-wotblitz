import React, { createContext, useContext, useState, useCallback, useEffect } from "react";

// –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
interface NotificationMessage {
  id: number;
  message: string;
  type: "error" | "success"; // üî¥ –û—à–∏–±–∫–∞ –∏–ª–∏ ‚úÖ –£—Å–ø–µ—Ö
}

// –ö–æ–Ω—Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const AddNotificationContext = createContext<(message: string, type?: "error" | "success") => void>(() => {});
const NotificationDataContext = createContext<{ 
  notification: NotificationMessage | null; 
  removeNotification: () => void;
}>({ notification: null, removeNotification: () => {} });

export const NotificationProvider = ({ children }: { children: React.ReactNode }) => {
  const [notifications, setNotifications] = useState<NotificationMessage[]>([]);
  const [currentNotification, setCurrentNotification] = useState<NotificationMessage | null>(null);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –æ—à–∏–±–∫–∞)
  const addNotification = useCallback((message: string, type: "error" | "success" = "error") => {
    const id = Date.now();
    setNotifications((prev) => [...prev, { id, message, type }]);
  }, []);

  // –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const removeNotification = useCallback(() => {
    setNotifications((prev) => {
      const nextNotification = prev.length > 1 ? prev[1] : null;
      setCurrentNotification(nextNotification);
      return prev.slice(1);
    });
  }, []);

  // –ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    if (currentNotification) {
      const timer = setTimeout(() => removeNotification(), 5000);
      return () => clearTimeout(timer);
    }
  }, [currentNotification]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞
  useEffect(() => {
    if (notifications.length > 0 && !currentNotification) {
      setCurrentNotification(notifications[0]);
    }
  }, [notifications, currentNotification]);

  return (
    <AddNotificationContext.Provider value={addNotification}>
      <NotificationDataContext.Provider value={{ notification: currentNotification, removeNotification }}>
        {children}
      </NotificationDataContext.Provider>
    </AddNotificationContext.Provider>
  );
};
export const useNotification = () => useContext(AddNotificationContext);
export const useNotificationData = () => useContext(NotificationDataContext);

// üî¥ `useError` –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É —Ä–∞–±–æ—Ç–∞–µ—Ç
export const useError = () => {
  const addNotification = useContext(AddNotificationContext);
  return (message: string) => addNotification(message, "error");
};

// ‚úÖ `useSuccess` —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
export const useSuccess = () => {
  const addNotification = useContext(AddNotificationContext);
  return (message: string) => addNotification(message, "success");
};