/* tslint:disable */
/* eslint-disable */
/**
 * Authentication
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIErrorResponse } from '../models';
// @ts-ignore
import type { APIRegion } from '../models';
// @ts-ignore
import type { APIRestUser } from '../models';
/**
 * StatsApi - axios parameter creator
 * @export
 */
export const StatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get General
         * @param {APIRegion} region 
         * @param {string} name 
         * @param {string} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneralRegionPlayerGetGeneralGet: async (region: APIRegion, name: string, accessToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'region' is not null or undefined
            assertParamExists('getGeneralRegionPlayerGetGeneralGet', 'region', region)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getGeneralRegionPlayerGetGeneralGet', 'name', name)
            const localVarPath = `/{region}/player/get_general`
                .replace(`{${"region"}}`, encodeURIComponent(String(region)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Period
         * @param {APIRegion} region 
         * @param {string} name 
         * @param {number} startDay 
         * @param {number} endDay 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeriodRegionPlayerPeriodGet: async (region: APIRegion, name: string, startDay: number, endDay: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'region' is not null or undefined
            assertParamExists('getPeriodRegionPlayerPeriodGet', 'region', region)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getPeriodRegionPlayerPeriodGet', 'name', name)
            // verify required parameter 'startDay' is not null or undefined
            assertParamExists('getPeriodRegionPlayerPeriodGet', 'startDay', startDay)
            // verify required parameter 'endDay' is not null or undefined
            assertParamExists('getPeriodRegionPlayerPeriodGet', 'endDay', endDay)
            const localVarPath = `/{region}/player/period`
                .replace(`{${"region"}}`, encodeURIComponent(String(region)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (startDay !== undefined) {
                localVarQueryParameter['start_day'] = startDay;
            }

            if (endDay !== undefined) {
                localVarQueryParameter['end_day'] = endDay;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Session
         * @param {APIRegion} region 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionRegionPlayerGetSessionGet: async (region: APIRegion, name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'region' is not null or undefined
            assertParamExists('getSessionRegionPlayerGetSessionGet', 'region', region)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getSessionRegionPlayerGetSessionGet', 'name', name)
            const localVarPath = `/{region}/player/get_session`
                .replace(`{${"region"}}`, encodeURIComponent(String(region)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatsApi - functional programming interface
 * @export
 */
export const StatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get General
         * @param {APIRegion} region 
         * @param {string} name 
         * @param {string} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGeneralRegionPlayerGetGeneralGet(region: APIRegion, name: string, accessToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIRestUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGeneralRegionPlayerGetGeneralGet(region, name, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatsApi.getGeneralRegionPlayerGetGeneralGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Period
         * @param {APIRegion} region 
         * @param {string} name 
         * @param {number} startDay 
         * @param {number} endDay 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPeriodRegionPlayerPeriodGet(region: APIRegion, name: string, startDay: number, endDay: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPeriodRegionPlayerPeriodGet(region, name, startDay, endDay, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatsApi.getPeriodRegionPlayerPeriodGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Session
         * @param {APIRegion} region 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionRegionPlayerGetSessionGet(region: APIRegion, name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIRestUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionRegionPlayerGetSessionGet(region, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatsApi.getSessionRegionPlayerGetSessionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StatsApi - factory interface
 * @export
 */
export const StatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get General
         * @param {StatsApiGetGeneralRegionPlayerGetGeneralGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneralRegionPlayerGetGeneralGet(requestParameters: StatsApiGetGeneralRegionPlayerGetGeneralGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<APIRestUser> {
            return localVarFp.getGeneralRegionPlayerGetGeneralGet(requestParameters.region, requestParameters.name, requestParameters.accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Period
         * @param {StatsApiGetPeriodRegionPlayerPeriodGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeriodRegionPlayerPeriodGet(requestParameters: StatsApiGetPeriodRegionPlayerPeriodGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getPeriodRegionPlayerPeriodGet(requestParameters.region, requestParameters.name, requestParameters.startDay, requestParameters.endDay, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Session
         * @param {StatsApiGetSessionRegionPlayerGetSessionGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionRegionPlayerGetSessionGet(requestParameters: StatsApiGetSessionRegionPlayerGetSessionGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<APIRestUser> {
            return localVarFp.getSessionRegionPlayerGetSessionGet(requestParameters.region, requestParameters.name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getGeneralRegionPlayerGetGeneralGet operation in StatsApi.
 * @export
 * @interface StatsApiGetGeneralRegionPlayerGetGeneralGetRequest
 */
export interface StatsApiGetGeneralRegionPlayerGetGeneralGetRequest {
    /**
     * 
     * @type {APIRegion}
     * @memberof StatsApiGetGeneralRegionPlayerGetGeneralGet
     */
    readonly region: APIRegion

    /**
     * 
     * @type {string}
     * @memberof StatsApiGetGeneralRegionPlayerGetGeneralGet
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof StatsApiGetGeneralRegionPlayerGetGeneralGet
     */
    readonly accessToken?: string
}

/**
 * Request parameters for getPeriodRegionPlayerPeriodGet operation in StatsApi.
 * @export
 * @interface StatsApiGetPeriodRegionPlayerPeriodGetRequest
 */
export interface StatsApiGetPeriodRegionPlayerPeriodGetRequest {
    /**
     * 
     * @type {APIRegion}
     * @memberof StatsApiGetPeriodRegionPlayerPeriodGet
     */
    readonly region: APIRegion

    /**
     * 
     * @type {string}
     * @memberof StatsApiGetPeriodRegionPlayerPeriodGet
     */
    readonly name: string

    /**
     * 
     * @type {number}
     * @memberof StatsApiGetPeriodRegionPlayerPeriodGet
     */
    readonly startDay: number

    /**
     * 
     * @type {number}
     * @memberof StatsApiGetPeriodRegionPlayerPeriodGet
     */
    readonly endDay: number
}

/**
 * Request parameters for getSessionRegionPlayerGetSessionGet operation in StatsApi.
 * @export
 * @interface StatsApiGetSessionRegionPlayerGetSessionGetRequest
 */
export interface StatsApiGetSessionRegionPlayerGetSessionGetRequest {
    /**
     * 
     * @type {APIRegion}
     * @memberof StatsApiGetSessionRegionPlayerGetSessionGet
     */
    readonly region: APIRegion

    /**
     * 
     * @type {string}
     * @memberof StatsApiGetSessionRegionPlayerGetSessionGet
     */
    readonly name: string
}

/**
 * StatsApi - object-oriented interface
 * @export
 * @class StatsApi
 * @extends {BaseAPI}
 */
export class StatsApi extends BaseAPI {
    /**
     * 
     * @summary Get General
     * @param {StatsApiGetGeneralRegionPlayerGetGeneralGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    public getGeneralRegionPlayerGetGeneralGet(requestParameters: StatsApiGetGeneralRegionPlayerGetGeneralGetRequest, options?: RawAxiosRequestConfig) {
        return StatsApiFp(this.configuration).getGeneralRegionPlayerGetGeneralGet(requestParameters.region, requestParameters.name, requestParameters.accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Period
     * @param {StatsApiGetPeriodRegionPlayerPeriodGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    public getPeriodRegionPlayerPeriodGet(requestParameters: StatsApiGetPeriodRegionPlayerPeriodGetRequest, options?: RawAxiosRequestConfig) {
        return StatsApiFp(this.configuration).getPeriodRegionPlayerPeriodGet(requestParameters.region, requestParameters.name, requestParameters.startDay, requestParameters.endDay, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Session
     * @param {StatsApiGetSessionRegionPlayerGetSessionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    public getSessionRegionPlayerGetSessionGet(requestParameters: StatsApiGetSessionRegionPlayerGetSessionGetRequest, options?: RawAxiosRequestConfig) {
        return StatsApiFp(this.configuration).getSessionRegionPlayerGetSessionGet(requestParameters.region, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }
}

