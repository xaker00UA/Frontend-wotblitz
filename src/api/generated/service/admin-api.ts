/* tslint:disable */
/* eslint-disable */
/**
 * Authentication
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIAdminStats } from '../models';
// @ts-ignore
import type { APICommand } from '../models';
// @ts-ignore
import type { APIErrorResponse } from '../models';
// @ts-ignore
import type { APILoginForm } from '../models';
/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Info
         * @param {number} [limit] 
         * @param {string} [adminToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoAdminInfoGet: async (limit?: number, adminToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {APILoginForm} aPILoginForm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAdminLoginPost: async (aPILoginForm: APILoginForm, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aPILoginForm' is not null or undefined
            assertParamExists('loginAdminLoginPost', 'aPILoginForm', aPILoginForm)
            const localVarPath = `/admin/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aPILoginForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutAdminLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Protected Route
         * @param {APICommand} aPICommand 
         * @param {string} [adminToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        protectedRouteAdminCommandsPost: async (aPICommand: APICommand, adminToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aPICommand' is not null or undefined
            assertParamExists('protectedRouteAdminCommandsPost', 'aPICommand', aPICommand)
            const localVarPath = `/admin/commands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aPICommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify Token
         * @param {string} [adminToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyTokenAdminVerifyGet: async (adminToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Info
         * @param {number} [limit] 
         * @param {string} [adminToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async infoAdminInfoGet(limit?: number, adminToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIAdminStats>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.infoAdminInfoGet(limit, adminToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.infoAdminInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login
         * @param {APILoginForm} aPILoginForm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAdminLoginPost(aPILoginForm: APILoginForm, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAdminLoginPost(aPILoginForm, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.loginAdminLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutAdminLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutAdminLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.logoutAdminLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Protected Route
         * @param {APICommand} aPICommand 
         * @param {string} [adminToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async protectedRouteAdminCommandsPost(aPICommand: APICommand, adminToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.protectedRouteAdminCommandsPost(aPICommand, adminToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.protectedRouteAdminCommandsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Verify Token
         * @param {string} [adminToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyTokenAdminVerifyGet(adminToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyTokenAdminVerifyGet(adminToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.verifyTokenAdminVerifyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @summary Info
         * @param {AdminApiInfoAdminInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoAdminInfoGet(requestParameters: AdminApiInfoAdminInfoGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<APIAdminStats> {
            return localVarFp.infoAdminInfoGet(requestParameters.limit, requestParameters.adminToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {AdminApiLoginAdminLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAdminLoginPost(requestParameters: AdminApiLoginAdminLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.loginAdminLoginPost(requestParameters.aPILoginForm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutAdminLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.logoutAdminLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Protected Route
         * @param {AdminApiProtectedRouteAdminCommandsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        protectedRouteAdminCommandsPost(requestParameters: AdminApiProtectedRouteAdminCommandsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.protectedRouteAdminCommandsPost(requestParameters.aPICommand, requestParameters.adminToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify Token
         * @param {AdminApiVerifyTokenAdminVerifyGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyTokenAdminVerifyGet(requestParameters: AdminApiVerifyTokenAdminVerifyGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.verifyTokenAdminVerifyGet(requestParameters.adminToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for infoAdminInfoGet operation in AdminApi.
 * @export
 * @interface AdminApiInfoAdminInfoGetRequest
 */
export interface AdminApiInfoAdminInfoGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminApiInfoAdminInfoGet
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof AdminApiInfoAdminInfoGet
     */
    readonly adminToken?: string
}

/**
 * Request parameters for loginAdminLoginPost operation in AdminApi.
 * @export
 * @interface AdminApiLoginAdminLoginPostRequest
 */
export interface AdminApiLoginAdminLoginPostRequest {
    /**
     * 
     * @type {APILoginForm}
     * @memberof AdminApiLoginAdminLoginPost
     */
    readonly aPILoginForm: APILoginForm
}

/**
 * Request parameters for protectedRouteAdminCommandsPost operation in AdminApi.
 * @export
 * @interface AdminApiProtectedRouteAdminCommandsPostRequest
 */
export interface AdminApiProtectedRouteAdminCommandsPostRequest {
    /**
     * 
     * @type {APICommand}
     * @memberof AdminApiProtectedRouteAdminCommandsPost
     */
    readonly aPICommand: APICommand

    /**
     * 
     * @type {string}
     * @memberof AdminApiProtectedRouteAdminCommandsPost
     */
    readonly adminToken?: string
}

/**
 * Request parameters for verifyTokenAdminVerifyGet operation in AdminApi.
 * @export
 * @interface AdminApiVerifyTokenAdminVerifyGetRequest
 */
export interface AdminApiVerifyTokenAdminVerifyGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiVerifyTokenAdminVerifyGet
     */
    readonly adminToken?: string
}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 
     * @summary Info
     * @param {AdminApiInfoAdminInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public infoAdminInfoGet(requestParameters: AdminApiInfoAdminInfoGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).infoAdminInfoGet(requestParameters.limit, requestParameters.adminToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {AdminApiLoginAdminLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public loginAdminLoginPost(requestParameters: AdminApiLoginAdminLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).loginAdminLoginPost(requestParameters.aPILoginForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public logoutAdminLogoutPost(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).logoutAdminLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Protected Route
     * @param {AdminApiProtectedRouteAdminCommandsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public protectedRouteAdminCommandsPost(requestParameters: AdminApiProtectedRouteAdminCommandsPostRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).protectedRouteAdminCommandsPost(requestParameters.aPICommand, requestParameters.adminToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify Token
     * @param {AdminApiVerifyTokenAdminVerifyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public verifyTokenAdminVerifyGet(requestParameters: AdminApiVerifyTokenAdminVerifyGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).verifyTokenAdminVerifyGet(requestParameters.adminToken, options).then((request) => request(this.axios, this.basePath));
    }
}

