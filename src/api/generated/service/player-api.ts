/* tslint:disable */
/* eslint-disable */
/**
 * Authentication
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { APIErrorResponse } from "../models";
// @ts-ignore
import type { APIParameter } from "../models";
// @ts-ignore
import type { APIRestUserDB } from "../models";
/**
 * PlayerApi - axios parameter creator
 * @export
 */
export const PlayerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Player
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playerPlayerGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/player`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Reset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetResetGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/reset`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchGet: async (
      name: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("searchSearchGet", "name", name);
      const localVarPath = `/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Top Players
     * @param {number} [limit]
     * @param {APIParameter} [parameter]
     * @param {number} [startDay]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    topPlayersTopPlayersGet: async (
      limit?: number,
      parameter?: APIParameter,
      startDay?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/top_players`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (parameter !== undefined) {
        localVarQueryParameter["parameter"] = parameter;
      }

      if (startDay !== undefined) {
        localVarQueryParameter["start_day"] = startDay;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PlayerApi - functional programming interface
 * @export
 */
export const PlayerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PlayerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Player
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playerPlayerGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIRestUserDB>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.playerPlayerGet(
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PlayerApi.playerPlayerGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Reset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resetResetGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.resetResetGet(
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PlayerApi.resetResetGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Search
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchSearchGet(
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<APIRestUserDB>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.searchSearchGet(
        name,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PlayerApi.searchSearchGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Top Players
     * @param {number} [limit]
     * @param {APIParameter} [parameter]
     * @param {number} [startDay]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async topPlayersTopPlayersGet(
      limit?: number,
      parameter?: APIParameter,
      startDay?: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.topPlayersTopPlayersGet(
          limit,
          parameter,
          startDay,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PlayerApi.topPlayersTopPlayersGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PlayerApi - factory interface
 * @export
 */
export const PlayerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PlayerApiFp(configuration);
  return {
    /**
     *
     * @summary Player
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playerPlayerGet(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<APIRestUserDB> {
      return localVarFp
        .playerPlayerGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Reset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetResetGet(options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
      return localVarFp
        .resetResetGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search
     * @param {PlayerApiSearchSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchGet(
      requestParameters: PlayerApiSearchSearchGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<APIRestUserDB>> {
      return localVarFp
        .searchSearchGet(requestParameters.name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Top Players
     * @param {PlayerApiTopPlayersTopPlayersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    topPlayersTopPlayersGet(
      requestParameters: PlayerApiTopPlayersTopPlayersGetRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .topPlayersTopPlayersGet(
          requestParameters.limit,
          requestParameters.parameter,
          requestParameters.startDay,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for searchSearchGet operation in PlayerApi.
 * @export
 * @interface PlayerApiSearchSearchGetRequest
 */
export interface PlayerApiSearchSearchGetRequest {
  /**
   *
   * @type {string}
   * @memberof PlayerApiSearchSearchGet
   */
  readonly name: string;
}

/**
 * Request parameters for topPlayersTopPlayersGet operation in PlayerApi.
 * @export
 * @interface PlayerApiTopPlayersTopPlayersGetRequest
 */
export interface PlayerApiTopPlayersTopPlayersGetRequest {
  /**
   *
   * @type {number}
   * @memberof PlayerApiTopPlayersTopPlayersGet
   */
  readonly limit?: number;

  /**
   *
   * @type {APIParameter}
   * @memberof PlayerApiTopPlayersTopPlayersGet
   */
  readonly parameter?: APIParameter;

  /**
   *
   * @type {number}
   * @memberof PlayerApiTopPlayersTopPlayersGet
   */
  readonly startDay?: number;
}

/**
 * PlayerApi - object-oriented interface
 * @export
 * @class PlayerApi
 * @extends {BaseAPI}
 */
export class PlayerApi extends BaseAPI {
  /**
   *
   * @summary Player
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlayerApi
   */
  public playerPlayerGet(options?: RawAxiosRequestConfig) {
    return PlayerApiFp(this.configuration)
      .playerPlayerGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Reset
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlayerApi
   */
  public resetResetGet(options?: RawAxiosRequestConfig) {
    return PlayerApiFp(this.configuration)
      .resetResetGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search
   * @param {PlayerApiSearchSearchGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlayerApi
   */
  public searchSearchGet(
    requestParameters: PlayerApiSearchSearchGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PlayerApiFp(this.configuration)
      .searchSearchGet(requestParameters.name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Top Players
   * @param {PlayerApiTopPlayersTopPlayersGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlayerApi
   */
  public topPlayersTopPlayersGet(
    requestParameters: PlayerApiTopPlayersTopPlayersGetRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return PlayerApiFp(this.configuration)
      .topPlayersTopPlayersGet(
        requestParameters.limit,
        requestParameters.parameter,
        requestParameters.startDay,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
