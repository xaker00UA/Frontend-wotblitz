/* tslint:disable */
/* eslint-disable */
/**
 * Authentication
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIAuthLogin } from '../models';
// @ts-ignore
import type { APIAuthVerify } from '../models';
// @ts-ignore
import type { APIErrorResponse } from '../models';
// @ts-ignore
import type { APIRegion } from '../models';
// @ts-ignore
import type { APIRestUserDB } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Auth
         * @param {string} accessToken 
         * @param {string} nickname 
         * @param {number} accountId 
         * @param {string | null} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAuthGet: async (accessToken: string, nickname: string, accountId: number, region?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessToken' is not null or undefined
            assertParamExists('authAuthGet', 'accessToken', accessToken)
            // verify required parameter 'nickname' is not null or undefined
            assertParamExists('authAuthGet', 'nickname', nickname)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('authAuthGet', 'accountId', accountId)
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (nickname !== undefined) {
                localVarQueryParameter['nickname'] = nickname;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auth Verify Token
         * @param {string} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyTokenAuthVerifyGet: async (accessToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {APIRegion} region 
         * @param {string} redirectUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginLoginRegionGet: async (region: APIRegion, redirectUrl: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'region' is not null or undefined
            assertParamExists('loginLoginRegionGet', 'region', region)
            // verify required parameter 'redirectUrl' is not null or undefined
            assertParamExists('loginLoginRegionGet', 'redirectUrl', redirectUrl)
            const localVarPath = `/login/{region}`
                .replace(`{${"region"}}`, encodeURIComponent(String(region)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (redirectUrl !== undefined) {
                localVarQueryParameter['redirect_url'] = redirectUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutLogoutGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Auth
         * @param {string} accessToken 
         * @param {string} nickname 
         * @param {number} accountId 
         * @param {string | null} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authAuthGet(accessToken: string, nickname: string, accountId: number, region?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIRestUserDB>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authAuthGet(accessToken, nickname, accountId, region, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authAuthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auth Verify Token
         * @param {string} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authVerifyTokenAuthVerifyGet(accessToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIAuthVerify>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authVerifyTokenAuthVerifyGet(accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authVerifyTokenAuthVerifyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login
         * @param {APIRegion} region 
         * @param {string} redirectUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginLoginRegionGet(region: APIRegion, redirectUrl: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIAuthLogin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginLoginRegionGet(region, redirectUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.loginLoginRegionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutLogoutGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutLogoutGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.logoutLogoutGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Auth
         * @param {AuthApiAuthAuthGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAuthGet(requestParameters: AuthApiAuthAuthGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<APIRestUserDB> {
            return localVarFp.authAuthGet(requestParameters.accessToken, requestParameters.nickname, requestParameters.accountId, requestParameters.region, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auth Verify Token
         * @param {AuthApiAuthVerifyTokenAuthVerifyGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyTokenAuthVerifyGet(requestParameters: AuthApiAuthVerifyTokenAuthVerifyGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<APIAuthVerify> {
            return localVarFp.authVerifyTokenAuthVerifyGet(requestParameters.accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {AuthApiLoginLoginRegionGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginLoginRegionGet(requestParameters: AuthApiLoginLoginRegionGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<APIAuthLogin> {
            return localVarFp.loginLoginRegionGet(requestParameters.region, requestParameters.redirectUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutLogoutGet(options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.logoutLogoutGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authAuthGet operation in AuthApi.
 * @export
 * @interface AuthApiAuthAuthGetRequest
 */
export interface AuthApiAuthAuthGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthApiAuthAuthGet
     */
    readonly accessToken: string

    /**
     * 
     * @type {string}
     * @memberof AuthApiAuthAuthGet
     */
    readonly nickname: string

    /**
     * 
     * @type {number}
     * @memberof AuthApiAuthAuthGet
     */
    readonly accountId: number

    /**
     * 
     * @type {string}
     * @memberof AuthApiAuthAuthGet
     */
    readonly region?: string | null
}

/**
 * Request parameters for authVerifyTokenAuthVerifyGet operation in AuthApi.
 * @export
 * @interface AuthApiAuthVerifyTokenAuthVerifyGetRequest
 */
export interface AuthApiAuthVerifyTokenAuthVerifyGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthApiAuthVerifyTokenAuthVerifyGet
     */
    readonly accessToken?: string
}

/**
 * Request parameters for loginLoginRegionGet operation in AuthApi.
 * @export
 * @interface AuthApiLoginLoginRegionGetRequest
 */
export interface AuthApiLoginLoginRegionGetRequest {
    /**
     * 
     * @type {APIRegion}
     * @memberof AuthApiLoginLoginRegionGet
     */
    readonly region: APIRegion

    /**
     * 
     * @type {string}
     * @memberof AuthApiLoginLoginRegionGet
     */
    readonly redirectUrl: string
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Auth
     * @param {AuthApiAuthAuthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authAuthGet(requestParameters: AuthApiAuthAuthGetRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authAuthGet(requestParameters.accessToken, requestParameters.nickname, requestParameters.accountId, requestParameters.region, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auth Verify Token
     * @param {AuthApiAuthVerifyTokenAuthVerifyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authVerifyTokenAuthVerifyGet(requestParameters: AuthApiAuthVerifyTokenAuthVerifyGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authVerifyTokenAuthVerifyGet(requestParameters.accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {AuthApiLoginLoginRegionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginLoginRegionGet(requestParameters: AuthApiLoginLoginRegionGetRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).loginLoginRegionGet(requestParameters.region, requestParameters.redirectUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logoutLogoutGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).logoutLogoutGet(options).then((request) => request(this.axios, this.basePath));
    }
}

