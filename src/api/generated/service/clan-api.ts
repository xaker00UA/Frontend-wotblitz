/* tslint:disable */
/* eslint-disable */
/**
 * Authentication
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIClanDB } from '../models';
// @ts-ignore
import type { APIClanTop } from '../models';
// @ts-ignore
import type { APIErrorResponse } from '../models';
// @ts-ignore
import type { APIRegion } from '../models';
// @ts-ignore
import type { APIRestClan } from '../models';
/**
 * ClanApi - axios parameter creator
 * @export
 */
export const ClanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Clan Session
         * @param {APIRegion} region 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClanSessionRegionClanGet: async (region: APIRegion, name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'region' is not null or undefined
            assertParamExists('getClanSessionRegionClanGet', 'region', region)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getClanSessionRegionClanGet', 'name', name)
            const localVarPath = `/{region}/clan/`
                .replace(`{${"region"}}`, encodeURIComponent(String(region)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Clan
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchClanClanSearchGet: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('searchClanClanSearchGet', 'name', name)
            const localVarPath = `/clan/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Top Clan List
         * @param {number} [endDay] 
         * @param {number} [startDay] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topClanListTopClanGet: async (endDay?: number, startDay?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/top_clan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (endDay !== undefined) {
                localVarQueryParameter['end_day'] = endDay;
            }

            if (startDay !== undefined) {
                localVarQueryParameter['start_day'] = startDay;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClanApi - functional programming interface
 * @export
 */
export const ClanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClanApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Clan Session
         * @param {APIRegion} region 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClanSessionRegionClanGet(region: APIRegion, name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIRestClan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClanSessionRegionClanGet(region, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClanApi.getClanSessionRegionClanGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search Clan
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchClanClanSearchGet(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<APIClanDB>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchClanClanSearchGet(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClanApi.searchClanClanSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Top Clan List
         * @param {number} [endDay] 
         * @param {number} [startDay] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topClanListTopClanGet(endDay?: number, startDay?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<APIClanTop>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.topClanListTopClanGet(endDay, startDay, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClanApi.topClanListTopClanGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClanApi - factory interface
 * @export
 */
export const ClanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClanApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Clan Session
         * @param {ClanApiGetClanSessionRegionClanGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClanSessionRegionClanGet(requestParameters: ClanApiGetClanSessionRegionClanGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<APIRestClan> {
            return localVarFp.getClanSessionRegionClanGet(requestParameters.region, requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Clan
         * @param {ClanApiSearchClanClanSearchGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchClanClanSearchGet(requestParameters: ClanApiSearchClanClanSearchGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<APIClanDB>> {
            return localVarFp.searchClanClanSearchGet(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Top Clan List
         * @param {ClanApiTopClanListTopClanGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topClanListTopClanGet(requestParameters: ClanApiTopClanListTopClanGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<APIClanTop>> {
            return localVarFp.topClanListTopClanGet(requestParameters.endDay, requestParameters.startDay, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getClanSessionRegionClanGet operation in ClanApi.
 * @export
 * @interface ClanApiGetClanSessionRegionClanGetRequest
 */
export interface ClanApiGetClanSessionRegionClanGetRequest {
    /**
     * 
     * @type {APIRegion}
     * @memberof ClanApiGetClanSessionRegionClanGet
     */
    readonly region: APIRegion

    /**
     * 
     * @type {string}
     * @memberof ClanApiGetClanSessionRegionClanGet
     */
    readonly name: string
}

/**
 * Request parameters for searchClanClanSearchGet operation in ClanApi.
 * @export
 * @interface ClanApiSearchClanClanSearchGetRequest
 */
export interface ClanApiSearchClanClanSearchGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ClanApiSearchClanClanSearchGet
     */
    readonly name: string
}

/**
 * Request parameters for topClanListTopClanGet operation in ClanApi.
 * @export
 * @interface ClanApiTopClanListTopClanGetRequest
 */
export interface ClanApiTopClanListTopClanGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ClanApiTopClanListTopClanGet
     */
    readonly endDay?: number

    /**
     * 
     * @type {number}
     * @memberof ClanApiTopClanListTopClanGet
     */
    readonly startDay?: number

    /**
     * 
     * @type {number}
     * @memberof ClanApiTopClanListTopClanGet
     */
    readonly limit?: number
}

/**
 * ClanApi - object-oriented interface
 * @export
 * @class ClanApi
 * @extends {BaseAPI}
 */
export class ClanApi extends BaseAPI {
    /**
     * 
     * @summary Get Clan Session
     * @param {ClanApiGetClanSessionRegionClanGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClanApi
     */
    public getClanSessionRegionClanGet(requestParameters: ClanApiGetClanSessionRegionClanGetRequest, options?: RawAxiosRequestConfig) {
        return ClanApiFp(this.configuration).getClanSessionRegionClanGet(requestParameters.region, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Clan
     * @param {ClanApiSearchClanClanSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClanApi
     */
    public searchClanClanSearchGet(requestParameters: ClanApiSearchClanClanSearchGetRequest, options?: RawAxiosRequestConfig) {
        return ClanApiFp(this.configuration).searchClanClanSearchGet(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Top Clan List
     * @param {ClanApiTopClanListTopClanGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClanApi
     */
    public topClanListTopClanGet(requestParameters: ClanApiTopClanListTopClanGetRequest = {}, options?: RawAxiosRequestConfig) {
        return ClanApiFp(this.configuration).topClanListTopClanGet(requestParameters.endDay, requestParameters.startDay, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}

